enum Status {
  INDEXING
  READY
  TERMINATED
}

type Deployment @entity {
  id: ID! # deploymentId, IPFS hash to deployment
  version: String! # IPFS hash to version info
  indexers: [DeploymentIndexer]! @derivedFrom(field: "deployment")
  createdTimestamp: Date!

  plans: [Plan]! @derivedFrom(field: "deployment")
}

type DeploymentIndexer @entity {
  id: ID! # indexer adderss + deployment id
  indexer: Indexer!
  deployment: Deployment!

  blockHeight: BigInt!
  mmrRoot: String
  timestamp: Date
  status: Status!
}

# Necessary without https://github.com/subquery/subql/issues/442
type JSONBigInt @jsonField {
  type: String! # Always "bigint",
  value: String! # Hex encoded string
}

type EraValue @jsonField {
  era: Int!
  value: JSONBigInt!
  valueAfter: JSONBigInt!
}

type Indexer @entity {
  id: ID! # Indexers address
  metadata: String # Ipfs hash to metadata
  controller: String # Controller address for the indexer
  # rewardPool: String! # Address for the reward pool contract

  commission: EraValue!
  totalStake: EraValue!

  delegations: [Delegation] @derivedFrom(field: "indexer")

  lastRewardedEra: String # hex encoding

  demoProjectsIndexed: [String]! # projects indexed so far from demo project list 
  singleChallengePts: Int!
  singleChallenges: [SingleChallengesRecord]! # Record of single challenges acheived

  active: Boolean
}

type Delegator @entity {
  id: ID! # Indexers address

  totalDelegations: EraValue!
  delegations: [Delegation] @derivedFrom(field: "delegator")
  
  singleChallengePts: Int!
  singleChallenges: [SingleChallengesRecord]! # Record of single challenges acheived
}

type Consumer @entity {
  id: ID! # Indexers address

  singleChallengePts: Int!
  singleChallenges: [SingleChallengesRecord]! # Record of single challenges acheived
}

type Delegation @entity {
  id: ID! # nominator + indexer addresses
  delegator: Delegator!
  indexer: Indexer!

  amount: EraValue!
}

type Withdrawl @entity {
  id: ID! # nominator + index
  index: BigInt! # Index of the withdrawl
  delegator: String! # nominator address
  indexer: String! # nominator address
  startTime: Date!
  amount: BigInt!

  claimed: Boolean!
}

type PlanTemplate @entity {
  id: ID! # Index, hex encoded
  period: BigInt!
  dailyReqCap: BigInt!
  rateLimit: BigInt!
  metadata: String
}

type Plan @entity {
  id: ID! # Index, hex encoded
  price: BigInt!
  creator: String! # Address
  planTemplate: PlanTemplate!
  deployment: Deployment
}

type ServiceAgreement @entity {
  id: ID! # contract address
  indexerAddress: String!
  consumerAddress: String!

  deployment: Deployment!
  period: BigInt!
  startTime: Date!
  endTime: Date!

  value: BigInt!
}

type UnclaimedReward @entity {
  id: ID! # indexer + delegator

  indexerAddress: String!
  delegatorAddress: String!

  amount: BigInt!
}

type Reward @entity {
  id: ID! # indexer + delegator + tx hash

  indexerAddress: String!
  delegatorAddress: String!

  amount: BigInt!
  claimedTime: Date!
}

type SingleChallengesRecord @jsonField {
  title: String!
  points: Int!
  details: String!
  timestamp: Date!
}
